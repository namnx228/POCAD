/**
 ***************************************************************************
 * Copyright (C) 2007, Davide Ariu, Roberto Perdisci                       *
 * davide.ariu@diee.unica.it, roberto.perdisci@gmail.com                   *
 *                                                                         *
 * Distributed under the GNU Public License                                *
 * http://www.gnu.org/licenses/gpl.txt                                     *   
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License as published by    *
 * the Free Software Foundation; either version 2 of the License, or       *
 * (at your option) any later version.                                     *
 *                                                                         *             
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 ***************************************************************************
 */

package edu.gatech.mcpad.utils;

import java.io.File;

/**
 * This is the class which manages the directories of the project. The user must
 * specify the RootDirectory of the project. This RootDirectory must contain the
 * following subdirectories: - clustering. Contains the file clustering.conf and
 * the subdirectory maps that will contains the features maps generated by the
 * clustering procedure. - pcap. Is the directory containing the file data.pcap,
 * that contains the traffic used to generate maps, datasets and classifiers. -
 * svm. Is the directory that will contains the .svm files of the classifiers.
 * In the same directory is located the file svm.conf which specifye the
 * classifiers' parameters. - trainingset. Contains the .data files of the
 * training set.
 * 
 */
public class DirectoryHandler {

	private static final String DIR_SEPARATOR = File.separator;

	/**
	 * Define the location of configuration files
	 */
	private static final String CLUSTERING_DIR = "clustering";

	private static final String PCAPS_DIR = "pcap";

	private static final String SVM_DIR = "svm";

	private static final String CLUSTERING_CONFIG_FILE = CLUSTERING_DIR
			+ DIR_SEPARATOR + "clustering.conf";
	private static final String CLUSTERING_CONFIG_FILE2 = CLUSTERING_DIR
			+ DIR_SEPARATOR + "clustering2.conf";
	
	private static String clusteringConfigFile = CLUSTERING_CONFIG_FILE;

	private static final String FC_MAPS_DIR = CLUSTERING_DIR + DIR_SEPARATOR
			+ "maps";

	private static final String MODELS_DIR = SVM_DIR + DIR_SEPARATOR + "models";

	private static final String TRAININGSET_DIR = SVM_DIR + DIR_SEPARATOR
			+ "trainingsets";

	private static final String THRESHOLDS_DIR = SVM_DIR + DIR_SEPARATOR
			+ "thresholds";

	private static final String SVM_CONFIG_FILE = SVM_DIR + DIR_SEPARATOR
			+ "svm.conf";

	private static final String TRAINING_FILE = PCAPS_DIR + DIR_SEPARATOR
			+ "training.pcap";

	private static final String THRESHOLDS_FILE = THRESHOLDS_DIR
			+ DIR_SEPARATOR + "thresholds.obj";

	private static final String VALIDATION_NORMAL_FILE = PCAPS_DIR
			+ DIR_SEPARATOR + "validationNormal.pcap";

	private static final String VALIDATION_ATTACK_FILE = PCAPS_DIR
			+ DIR_SEPARATOR + "validationAttack.pcap";

	private String rootDirectory;

	private File fcMapsDir;

	private File modelsDir;

	private File pcapDir;

	private File svmDir;

	private File trainingSetDir;

	private File thresholdsDir;

	public DirectoryHandler(String rootDirectory) {
		this.rootDirectory = rootDirectory;
		makeAllDirs();
	}

	/**
	 * 
	 * @param dir
	 */
	private static void checkDir(File dir) {
		if (!dir.isDirectory()) {
			System.out.println("ERROR: " + dir.getAbsolutePath()
					+ " must be a directory!");
			System.exit(1);
		}
	}

	/**
	 * checks if the directory exists as a subdir of rootDirectory. If not it
	 * will exit with error message
	 * 
	 * @param directory
	 *            dir name
	 * @return
	 */
	public File checkDir(String directory) {

		File dir = new File(rootDirectory, directory);
		checkDir(dir); // will exit here if something is wrong

		return dir;
	}

	/**
	 * creates (if is does not exist, yet) the specified direcotry as a subdir
	 * of rootDirectory
	 * 
	 * @param directory
	 *            dir name
	 * @return the absolute path of the created dir
	 */
	public File makeDir(String directory) {

		File dir = new File(rootDirectory, directory);

		if (!dir.exists()) {
			System.out.println();
			System.out.println("> Creating " + dir.getAbsolutePath());
			System.out.println();
			dir.mkdir();
		}

		checkDir(dir); // will exit here if something is wrong

		return dir;
	}

	private void makeAllDirs() {

		try {
			pcapDir = makeDir(PCAPS_DIR);
			fcMapsDir = makeDir(FC_MAPS_DIR);
			trainingSetDir = makeDir(TRAININGSET_DIR);
			svmDir = makeDir(SVM_DIR);
			modelsDir = makeDir(MODELS_DIR);
			thresholdsDir = makeDir(THRESHOLDS_DIR);

		} catch (Exception e) {
			System.err.print("Exception" + e);
			System.exit(1);
		}
		
		System.out.println("---------------------------------------");
		System.out.println("> Normal traffic pcap file = " + pcapDir);
		System.out.println("> Normal dataset = " + trainingSetDir);
		System.out.println("> Feature Clusters Maps = " + fcMapsDir);
		System.out.println("> SVM = " + svmDir);
		System.out.println("> SVM Models = " + modelsDir);
		System.out.println("> Thresholds = " + thresholdsDir);
		System.out.println("---------------------------------------");
		System.out.println();
	}

	public String getRootDirectory() {
		return rootDirectory;
	}

	public File getTrainingsetDirectory() {
		return trainingSetDir;
	}

	public File getFcMapsDir() {
		return fcMapsDir;
	}

	public File getPcapDir() {
		return pcapDir;
	}

	public File getSvmDir() {
		return svmDir;
	}

	public File getModelsDir() {
		return modelsDir;
	}

	public File getTrainingsetDir() {
		return trainingSetDir;
	}

	public File getThresholdsDir() {
		return thresholdsDir;
	}

	public File getClusterConfigFile() {
		return new File(rootDirectory, clusteringConfigFile);
	}
	
	public void setClusterConfigFile(String filename)
	{
		clusteringConfigFile = filename;
	}
	
	public static String getFinalClusterConfigFile()
	{
		return CLUSTERING_CONFIG_FILE;
	}
	
	public static String getFinalClusterConfigFile2()
	{
		return CLUSTERING_CONFIG_FILE2;
	}

	public File getTrainingFile() {
		return new File(rootDirectory, TRAINING_FILE);
	}

	public File getSVMConfigFile() {
		return new File(rootDirectory, SVM_CONFIG_FILE);
	}

	public File getValidationNormalFile() {
		return new File(rootDirectory, VALIDATION_NORMAL_FILE);
	}

	public File getValidationAttackFile() {
		return new File(rootDirectory, VALIDATION_ATTACK_FILE);
	}

	public File getThresholdsFile() {
		return new File(rootDirectory, THRESHOLDS_FILE);
	}

}
